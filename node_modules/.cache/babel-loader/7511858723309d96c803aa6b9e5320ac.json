{"ast":null,"code":"import { RESERVATION_LIST_REQUEST, RESERVATION_LIST_SUCCESS, RESERVATION_LIST_FAIL, RESERVATION_DETAILS_REQUEST, RESERVATION_DETAILS_SUCCESS, RESERVATION_DETAILS_FAIL, RESERVATION_SAVE_REQUEST, RESERVATION_SAVE_SUCCESS, RESERVATION_SAVE_FAIL, RESERVATION_DELETE_SUCCESS, RESERVATION_DELETE_FAIL, RESERVATION_DELETE_REQUEST } from \"../constants/reservationConstants\";\nimport axios from 'axios';\nimport Axios from \"axios\"; // const listPuppies = (category = '', searchKeyword = '', sortOrder = '') => async (dispatch) => {\n//   try {\n//     dispatch({ type: PUPPY_LIST_REQUEST });\n//     const { data } = await axios.get(\"/api/puppies?category=\" + category +\n//       \"&searchKeyword=\" + searchKeyword + \"&sortOrder=\" + sortOrder);\n//     dispatch({ type: PUPPY_LIST_SUCCESS, payload: data });\n//   }\n//   catch (error) {\n//     dispatch({ type: PUPPY_LIST_FAIL, payload: error.message });\n//   }\n// }\n\nconst listReservations = () => async dispatch => {\n  try {\n    dispatch({\n      type: RESERVATION_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/reservations');\n    dispatch({\n      type: RESERVATION_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: RESERVATION_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveReservation = reservation => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: RESERVATION_SAVE_REQUEST,\n      payload: reservation\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n\n    if (!reservation._id) {\n      const {\n        data\n      } = await Axios.post('/api/reservations', reservation, {\n        headers: {\n          'Authorization': 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: RESERVATION_SAVE_SUCCESS,\n        payload: data\n      });\n    } else {\n      const {\n        data\n      } = await Axios.put('/api/reservations/' + reservation._id, reservation, {\n        headers: {\n          'Authorization': 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: RESERVATION_SAVE_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: RESERVATION_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsReservation = reservationId => async dispatch => {\n  try {\n    dispatch({\n      type: RESERVATION_DETAILS_REQUEST,\n      payload: reservationId\n    });\n    const {\n      data\n    } = await axios.get(\"/api/reservations/\" + reservationId);\n    dispatch({\n      type: RESERVATION_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: RESERVATION_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst deleteReservation = reservationId => async (dispatch, getState) => {\n  try {\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    dispatch({\n      type: RESERVATION_DELETE_REQUEST,\n      payload: reservationId\n    });\n    const {\n      data\n    } = await axios.delete(\"/api/reservations/\" + reservationId, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: RESERVATION_DELETE_SUCCESS,\n      payload: data,\n      success: true\n    });\n  } catch (error) {\n    dispatch({\n      type: RESERVATION_DELETE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listReservations, detailsReservation, saveReservation, deleteReservation }; // import { RESERVATION_LIST_REQUEST, RESERVATION_LIST_SUCCESS, RESERVATION_LIST_FAIL } from '../constants/reservationConstants';\n// import axios from 'axios';\n// const listReservations = () => async (dispatch) => {\n// try {\n//     dispatch({ type: RESERVATION_LIST_REQUEST });\n//     const { data } = await axios.get('/api/reservations');\n//     dispatch({ type: RESERVATION_LIST_SUCCESS, payload: data});\n// }\n// catch (error) {\n//     dispatch({ type: RESERVATION_LIST_FAIL, payload: error.message });\n//     }\n// }\n// export { listReservations };","map":{"version":3,"sources":["/Users/deankrotzer/Desktop/Github/Homeraisedcairns/homeraisedcairns/src/actions/reservationActions.js"],"names":["RESERVATION_LIST_REQUEST","RESERVATION_LIST_SUCCESS","RESERVATION_LIST_FAIL","RESERVATION_DETAILS_REQUEST","RESERVATION_DETAILS_SUCCESS","RESERVATION_DETAILS_FAIL","RESERVATION_SAVE_REQUEST","RESERVATION_SAVE_SUCCESS","RESERVATION_SAVE_FAIL","RESERVATION_DELETE_SUCCESS","RESERVATION_DELETE_FAIL","RESERVATION_DELETE_REQUEST","axios","Axios","listReservations","dispatch","type","data","get","payload","error","message","saveReservation","reservation","getState","userSignin","userInfo","_id","post","headers","token","put","detailsReservation","reservationId","deleteReservation","delete","Authorization","success"],"mappings":"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","sourcesContent":["import {\n    RESERVATION_LIST_REQUEST, RESERVATION_LIST_SUCCESS, RESERVATION_LIST_FAIL,\n    RESERVATION_DETAILS_REQUEST, RESERVATION_DETAILS_SUCCESS, RESERVATION_DETAILS_FAIL, RESERVATION_SAVE_REQUEST, RESERVATION_SAVE_SUCCESS, RESERVATION_SAVE_FAIL, RESERVATION_DELETE_SUCCESS, RESERVATION_DELETE_FAIL, RESERVATION_DELETE_REQUEST\n  } from \"../constants/reservationConstants\"\n  import axios from 'axios';\n  import Axios from \"axios\";\n\n  // const listPuppies = (category = '', searchKeyword = '', sortOrder = '') => async (dispatch) => {\n  //   try {\n  \n  //     dispatch({ type: PUPPY_LIST_REQUEST });\n  //     const { data } = await axios.get(\"/api/puppies?category=\" + category +\n  //       \"&searchKeyword=\" + searchKeyword + \"&sortOrder=\" + sortOrder);\n  //     dispatch({ type: PUPPY_LIST_SUCCESS, payload: data });\n  //   }\n  //   catch (error) {\n  \n  //     dispatch({ type: PUPPY_LIST_FAIL, payload: error.message });\n  //   }\n  // }\n\n  const listReservations = () => async (dispatch) => {\n    try {\n        dispatch({ type: RESERVATION_LIST_REQUEST });\n        const { data } = await axios.get('/api/reservations');\n        dispatch({ type: RESERVATION_LIST_SUCCESS, payload: data});\n    }\n    catch (error) {\n        dispatch({ type: RESERVATION_LIST_FAIL, payload: error.message });\n        }\n    }\n    \n  const saveReservation = (reservation) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: RESERVATION_SAVE_REQUEST, payload: reservation });\n      const { userSignin: { userInfo } } = getState();\n      if (!reservation._id) {\n        const { data } = await Axios.post('/api/reservations', reservation, {\n          headers: {\n            'Authorization': 'Bearer ' + userInfo.token\n          }\n        });\n        dispatch({ type: RESERVATION_SAVE_SUCCESS, payload: data });\n      } else {\n        const { data } = await Axios.put('/api/reservations/' + reservation._id, reservation, {\n          headers: {\n            'Authorization': 'Bearer ' + userInfo.token\n          }\n        });\n        dispatch({ type: RESERVATION_SAVE_SUCCESS, payload: data });\n      }\n    } catch (error) {\n      dispatch({ type: RESERVATION_SAVE_FAIL, payload: error.message });\n    }\n  }\n  \n  const detailsReservation = (reservationId) => async (dispatch) => {\n    try {\n      dispatch({ type: RESERVATION_DETAILS_REQUEST, payload: reservationId });\n      const { data } = await axios.get(\"/api/reservations/\" + reservationId);\n      dispatch({ type: RESERVATION_DETAILS_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: RESERVATION_DETAILS_FAIL, payload: error.message });\n    }\n  }\n  \n  const deleteReservation = (reservationId) => async (dispatch, getState) => {\n    try {\n      const { userSignin: { userInfo } } = getState();\n      dispatch({ type: RESERVATION_DELETE_REQUEST, payload: reservationId });\n      const { data } = await axios.delete(\"/api/reservations/\" + reservationId, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({ type: RESERVATION_DELETE_SUCCESS, payload: data, success: true });\n    } catch (error) {\n      dispatch({ type: RESERVATION_DELETE_FAIL, payload: error.message });\n    }\n  }\n  \n  export { listReservations, detailsReservation, saveReservation, deleteReservation }\n\n\n// import { RESERVATION_LIST_REQUEST, RESERVATION_LIST_SUCCESS, RESERVATION_LIST_FAIL } from '../constants/reservationConstants';\n// import axios from 'axios';\n\n// const listReservations = () => async (dispatch) => {\n// try {\n//     dispatch({ type: RESERVATION_LIST_REQUEST });\n//     const { data } = await axios.get('/api/reservations');\n//     dispatch({ type: RESERVATION_LIST_SUCCESS, payload: data});\n\n// }\n// catch (error) {\n\n//     dispatch({ type: RESERVATION_LIST_FAIL, payload: error.message });\n//     }\n// }\n\n// export { listReservations };"]},"metadata":{},"sourceType":"module"}