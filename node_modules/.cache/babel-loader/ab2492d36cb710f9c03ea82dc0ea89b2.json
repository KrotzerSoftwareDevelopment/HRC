{"ast":null,"code":"import { RESERVATION_LIST_REQUEST, RESERVATION_LIST_SUCCESS, RESERVATION_LIST_FAIL, RESERVATION_DETAILS_REQUEST, RESERVATION_DETAILS_SUCCESS, RESERVATION_DETAILS_FAIL, RESERVATION_SAVE_REQUEST, RESERVATION_SAVE_SUCCESS, RESERVATION_SAVE_FAIL, RESERVATION_DELETE_SUCCESS, RESERVATION_DELETE_FAIL, RESERVATION_DELETE_REQUEST } from \"../constants/reservationConstants\";\nimport axios from 'axios';\nimport Axios from \"axios\"; // const listPuppies = (category = '', searchKeyword = '', sortOrder = '') => async (dispatch) => {\n//   try {\n//     dispatch({ type: PUPPY_LIST_REQUEST });\n//     const { data } = await axios.get(\"/api/puppies?category=\" + category +\n//       \"&searchKeyword=\" + searchKeyword + \"&sortOrder=\" + sortOrder);\n//     dispatch({ type: PUPPY_LIST_SUCCESS, payload: data });\n//   }\n//   catch (error) {\n//     dispatch({ type: PUPPY_LIST_FAIL, payload: error.message });\n//   }\n// }\n\nconst update = ({\n  reservationId,\n  clientName,\n  clientLocation,\n  gender,\n  litter,\n  litterETA,\n  reserved\n}) => async (dispatch, getState) => {\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n  dispatch({\n    type: RESERVATION_UPDATE_REQUEST,\n    payload: {\n      reservationId,\n      clientName,\n      clientLocation,\n      gender,\n      litter,\n      litterETA,\n      reserved\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.put(\"/api/reservations/\" + reservationId, {\n      reservationId,\n      clientName,\n      clientLocation,\n      gender,\n      litter,\n      litterETA,\n      reserved\n    }, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: RESERVATION_UPDATE_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: RESERVATION_UPDATE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst listReservations = () => async dispatch => {\n  try {\n    dispatch({\n      type: RESERVATION_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/reservations');\n    dispatch({\n      type: RESERVATION_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: RESERVATION_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveReservation = reservation => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: RESERVATION_SAVE_REQUEST,\n      payload: reservation\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n\n    if (!reservation._id) {\n      const {\n        data\n      } = await Axios.post('/api/reservations', reservation, {\n        headers: {\n          'Authorization': 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: RESERVATION_SAVE_SUCCESS,\n        payload: data\n      });\n    } else {\n      const {\n        data\n      } = await Axios.put('/api/reservations/' + reservation._id, reservation, {\n        headers: {\n          'Authorization': 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: RESERVATION_SAVE_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: RESERVATION_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsReservation = reservationId => async dispatch => {\n  try {\n    dispatch({\n      type: RESERVATION_DETAILS_REQUEST,\n      payload: reservationId\n    });\n    const {\n      data\n    } = await axios.get(\"/api/reservations/\" + reservationId);\n    dispatch({\n      type: RESERVATION_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: RESERVATION_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst deleteReservation = reservationId => async (dispatch, getState) => {\n  try {\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    dispatch({\n      type: RESERVATION_DELETE_REQUEST,\n      payload: reservationId\n    });\n    const {\n      data\n    } = await axios.delete(\"/api/reservations/\" + reservationId, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: RESERVATION_DELETE_SUCCESS,\n      payload: data,\n      success: true\n    });\n  } catch (error) {\n    dispatch({\n      type: RESERVATION_DELETE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listReservations, detailsReservation, saveReservation, deleteReservation }; // import { RESERVATION_LIST_REQUEST, RESERVATION_LIST_SUCCESS, RESERVATION_LIST_FAIL } from '../constants/reservationConstants';\n// import axios from 'axios';\n// const listReservations = () => async (dispatch) => {\n// try {\n//     dispatch({ type: RESERVATION_LIST_REQUEST });\n//     const { data } = await axios.get('/api/reservations');\n//     dispatch({ type: RESERVATION_LIST_SUCCESS, payload: data});\n// }\n// catch (error) {\n//     dispatch({ type: RESERVATION_LIST_FAIL, payload: error.message });\n//     }\n// }\n// export { listReservations };","map":{"version":3,"sources":["/Users/deankrotzer/Desktop/Github/Homeraisedcairns/homeraisedcairns/src/actions/reservationActions.js"],"names":["RESERVATION_LIST_REQUEST","RESERVATION_LIST_SUCCESS","RESERVATION_LIST_FAIL","RESERVATION_DETAILS_REQUEST","RESERVATION_DETAILS_SUCCESS","RESERVATION_DETAILS_FAIL","RESERVATION_SAVE_REQUEST","RESERVATION_SAVE_SUCCESS","RESERVATION_SAVE_FAIL","RESERVATION_DELETE_SUCCESS","RESERVATION_DELETE_FAIL","RESERVATION_DELETE_REQUEST","axios","Axios","update","reservationId","clientName","clientLocation","gender","litter","litterETA","reserved","dispatch","getState","userSignin","userInfo","type","RESERVATION_UPDATE_REQUEST","payload","data","put","headers","Authorization","token","RESERVATION_UPDATE_SUCCESS","Cookie","set","JSON","stringify","error","RESERVATION_UPDATE_FAIL","message","listReservations","get","saveReservation","reservation","_id","post","detailsReservation","deleteReservation","delete","success"],"mappings":"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","sourcesContent":["import {\n    RESERVATION_LIST_REQUEST, RESERVATION_LIST_SUCCESS, RESERVATION_LIST_FAIL,\n    RESERVATION_DETAILS_REQUEST, RESERVATION_DETAILS_SUCCESS, RESERVATION_DETAILS_FAIL, RESERVATION_SAVE_REQUEST, RESERVATION_SAVE_SUCCESS, RESERVATION_SAVE_FAIL, RESERVATION_DELETE_SUCCESS, RESERVATION_DELETE_FAIL, RESERVATION_DELETE_REQUEST\n  } from \"../constants/reservationConstants\"\n  import axios from 'axios';\n  import Axios from \"axios\";\n\n  // const listPuppies = (category = '', searchKeyword = '', sortOrder = '') => async (dispatch) => {\n  //   try {\n  \n  //     dispatch({ type: PUPPY_LIST_REQUEST });\n  //     const { data } = await axios.get(\"/api/puppies?category=\" + category +\n  //       \"&searchKeyword=\" + searchKeyword + \"&sortOrder=\" + sortOrder);\n  //     dispatch({ type: PUPPY_LIST_SUCCESS, payload: data });\n  //   }\n  //   catch (error) {\n  \n  //     dispatch({ type: PUPPY_LIST_FAIL, payload: error.message });\n  //   }\n  // }\n\n  const update = ({ reservationId, clientName, clientLocation, gender, litter, litterETA, reserved }) => async (dispatch, getState) => {\n    const { userSignin: { userInfo } } = getState();\n    dispatch({ type: RESERVATION_UPDATE_REQUEST, payload: { reservationId, clientName, clientLocation, gender, litter, litterETA, reserved } });\n    try {\n      const { data } = await Axios.put(\"/api/reservations/\" + reservationId,\n        { reservationId, clientName, clientLocation, gender, litter, litterETA, reserved }, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({ type: RESERVATION_UPDATE_SUCCESS, payload: data });\n      Cookie.set('userInfo', JSON.stringify(data));\n    } catch (error) {\n      dispatch({ type: RESERVATION_UPDATE_FAIL, payload: error.message });\n    }\n  }\n\n  const listReservations = () => async (dispatch) => {\n    try {\n        dispatch({ type: RESERVATION_LIST_REQUEST });\n        const { data } = await axios.get('/api/reservations');\n        dispatch({ type: RESERVATION_LIST_SUCCESS, payload: data});\n    }\n    catch (error) {\n        dispatch({ type: RESERVATION_LIST_FAIL, payload: error.message });\n        }\n    }\n    \n  const saveReservation = (reservation) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: RESERVATION_SAVE_REQUEST, payload: reservation });\n      const { userSignin: { userInfo } } = getState();\n      if (!reservation._id) {\n        const { data } = await Axios.post('/api/reservations', reservation, {\n          headers: {\n            'Authorization': 'Bearer ' + userInfo.token\n          }\n        });\n        dispatch({ type: RESERVATION_SAVE_SUCCESS, payload: data });\n      } else {\n        const { data } = await Axios.put('/api/reservations/' + reservation._id, reservation, {\n          headers: {\n            'Authorization': 'Bearer ' + userInfo.token\n          }\n        });\n        dispatch({ type: RESERVATION_SAVE_SUCCESS, payload: data });\n      }\n    } catch (error) {\n      dispatch({ type: RESERVATION_SAVE_FAIL, payload: error.message });\n    }\n  }\n  \n  const detailsReservation = (reservationId) => async (dispatch) => {\n    try {\n      dispatch({ type: RESERVATION_DETAILS_REQUEST, payload: reservationId });\n      const { data } = await axios.get(\"/api/reservations/\" + reservationId);\n      dispatch({ type: RESERVATION_DETAILS_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: RESERVATION_DETAILS_FAIL, payload: error.message });\n    }\n  }\n  \n  const deleteReservation = (reservationId) => async (dispatch, getState) => {\n    try {\n      const { userSignin: { userInfo } } = getState();\n      dispatch({ type: RESERVATION_DELETE_REQUEST, payload: reservationId });\n      const { data } = await axios.delete(\"/api/reservations/\" + reservationId, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({ type: RESERVATION_DELETE_SUCCESS, payload: data, success: true });\n    } catch (error) {\n      dispatch({ type: RESERVATION_DELETE_FAIL, payload: error.message });\n    }\n  }\n  \n  export { listReservations, detailsReservation, saveReservation, deleteReservation }\n\n\n// import { RESERVATION_LIST_REQUEST, RESERVATION_LIST_SUCCESS, RESERVATION_LIST_FAIL } from '../constants/reservationConstants';\n// import axios from 'axios';\n\n// const listReservations = () => async (dispatch) => {\n// try {\n//     dispatch({ type: RESERVATION_LIST_REQUEST });\n//     const { data } = await axios.get('/api/reservations');\n//     dispatch({ type: RESERVATION_LIST_SUCCESS, payload: data});\n\n// }\n// catch (error) {\n\n//     dispatch({ type: RESERVATION_LIST_FAIL, payload: error.message });\n//     }\n// }\n\n// export { listReservations };"]},"metadata":{},"sourceType":"module"}